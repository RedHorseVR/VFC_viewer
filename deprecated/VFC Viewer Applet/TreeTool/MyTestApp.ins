;  IRL FlowCode Version: Beta Version 3.6 - October 1997
;  c1995-1998: Visual FlowCoder and FlowCode is a tradename of FlowLynx / Ublige 
;
;  File Name : MyTestApp.ins
;  File Date : 10:12:52 PM - 07:Sep:1999


input(/** recipe log **/);//<--- part of framework
process(/**<TIME_STAMP> added Cross Hairs segments using: 'CrossHair.sg'  **/);//
process(/** <TIME_STAMP>  added a creation call class Dialog1 using frame: 'Call Dialog.fm' and button event name Dialog **/);//
process(/** <TIME_STAMP> LANGUAGE: Java ;   started Applet / Application  MyTestApp.class   using frame: 'Basic Applet.fm'   **/);//
end();//

input(/** Imports **/);//<--- part of framework
generic(import java.awt.*;);//  
generic(import java.applet.*;);//  
generic(  import java.net.*;  );//
set( import java.awt.event.*; );// 
set( import java.util.*;);// 
end(/*------------*/);//

input(public class MyTestApp  extends Applet {);//  <----- start of class definition  has drawing vars for lines

input(/** class data **/);//<--- used in framework
set(int HOMEX = 370;);//
set(int HOMEY = 150;);//
set(boolean last_was_branch  = false;);//
process(TreeTool TT ;);// 
generic(FCnavigate  NavTool ;);//Res.IDC_LIST1.addItem(" test " );
generic(  URL CodeBase;  );//
generic(int KeyHit = 'X';);//// // Resource Res;......
generic(String KeyHit_Object;);//// // Resource Res;......
set(int oldx = 0 , oldy = 0;);//
set(int dx = 0 , dy = 0 ;);//
set(  int CrossSize =  200;  );//
set(  int CrossXPos = 200;);//
set(  int CrossYPos = 10;  );//
output(  /**@shapeType AggregationLink*/  );//
generic(  private FCview lnkView;);//
generic(  /** end variables **/  );//
generic(  /** methods **/      );//// // <--- used in framework......
set(Resource Res;);//
end(/** end variables **/ );//

input(/** events **/);//<--- used in framework
set( Command searchCmd =new Command(Command.SEARCH ););// 
set( Command sortCmd =new Command(Command.SORT ););// 
end();//

input(public void showStatement( int N ) {);//
branch(if( N >  lnkView.SO.size()  ));//
path( { );//
set(N  =  lnkView.SO.size() ;);//
path( }else{ );//
branch(if( N < 1  ));//
path( { );//
set(N  =  1 ;);//
path( }else{ );//
bend( } );//
bend( } );//
process(StatementObject  S  = (StatementObject)  lnkView.SO.elementAt( N - 1 ) ;);//
process(  lnkView.currentObject = N  ;);//
set(CrossXPos -= S.x1 - HOMEX  ;);//oldx = 0;
set(CrossYPos -= S.y1 - HOMEY ;);//oldy = 0;
set(oldx = CrossXPos ;);//
set(oldy = CrossYPos ;);// 
process(  repaint();  );//
end(  } );//
event(public boolean keyDown( Event e , int key ) {);//
set(KeyHit = key;);//
set(int  DELTA=70;);//
branch(switch( key  ){);//
path( case 1000 :);//home
process(lnkView.Zoom=10;);//lnkView.zoom( g , ZoomScale );
set(CrossXPos = HOMEX ;);//oldx = 0;
set(CrossYPos = HOMEY ;);//oldy = 0;
process(  repaint();  );//
process();//  repaint();  
path( case 'Z' :);//
set(case 1002 :);//PageUP
process(lnkView.Zoom+=5;);//lnkView.zoom( g , ZoomScale );
process(  repaint();  );//
end(break; );//
path( case 'z' :);//
set(case 1003 :);//PageDOWN
process(lnkView.Zoom-=5;);//lnkView.zoom( g , ZoomScale );
process(  repaint();  );//
end(break; );//
path( case 1004:);// UP :
set(  CrossYPos -=DELTA;);////  CrossYPos +=  dy;////
process(  repaint();  );//
set(oldx = CrossXPos ;);//oldx = 0;
set(oldy = CrossYPos ;);//oldy = 0;
end(break; );//
path( case 1005 :);// DOWN :
set(  CrossYPos +=DELTA;);////  CrossYPos +=  dy;////
process(  repaint();  );//
set(oldx = CrossXPos ;);//oldx = 0;
set(oldy = CrossYPos ;);//oldy = 0;
end(break; );//
path( case 1006:);// LEFT :
set(  CrossXPos -=DELTA ;);////  CrossXPos+= dx;////
process(  repaint();  );//
set(oldx = CrossXPos ;);//oldx = 0;
set(oldy = CrossYPos ;);//oldy = 0;
end(break; );//
path( case 1007:);// RIGHT :
set(  CrossXPos +=DELTA ;);////  CrossXPos+= dx;////
process(  repaint();  );//
set(oldx = CrossXPos ;);//oldx = 0;
set(oldy = CrossYPos ;);//oldy = 0;
end(break; );//
path( default: );//
process(  repaint();  );//
end(return false; );//
bend( } );//
end(return true;  });//

input( public void init_TreeTool( Vector SO , String fname  ));// 
set( { );// 
set(String  buff = new String(""););//
set(String  path = new String(""););//
set(String  sname = new String(""););//
set(String  gifname= new String("set.gif"););//
set(String  last_object = new String("generic.gif"););//
set(int    Line = 1;);//
set(int    Level = 0;);//
set(StatementObject S;);//
set(TT.addItem( fname + ";program.gif;..;code map", null, this, CodeBase , true ););/// //Root node//
loop(for( int i =0 ; i< SO.size()  ; i++ ) {);//
process(S  = (StatementObject)  SO.elementAt( i ) ;);//
set(sname = "|";);//use the | to find begining of each code line
set(sname += (((S.Statement.replace( ';' , ':' )+"."+Line+"." ).replace('/', ' ')).replace('|','_')).replace('\\','_'););//the . (dot) is ued to find numbers 
set(Line++;);//
branch(try );//
path( {  );//
branch(if( S.Type.equals("input")  ));//
path( { );//
set(gifname= "input.gif";);//
branch(if( true   ));//if( Level == 0  )
path( { );//
set(path = "";);//path = path + sname + "/";
set( TT.addItem( path + sname + ";module.gif; ."+ Line + ";"+ S.Comment.replace( ';' , ':' ) , null, this, CodeBase , false ););//
set(path = sname + "/";);//path = path + sname + "/";
set(Level=1;);//
set(TT.addItem( path+sname+";"+gifname+";."+Line+";"+S.Comment, null, this, CodeBase , false ););//
path(}else{ );//
set(TT.addItem( path+sname+";"+gifname+";."+Line+";"+S.Comment, null, this, CodeBase , false ););//
set(path = path + sname + "/";);//
set(Level++;);//
bend( } );//
path(} else if( S.Type.equals("loop")  ||  S.Type.equals("branch")    ||  S.Type.equals("path")  ) {);//
set(gifname= S.Type + ".gif";);//
branch(if( S.Type.equals("path")  ));//
path( { );//
branch(if( ! last_object.equals("branch" ) ));//
path( { );//
branch(if( path.lastIndexOf('/') > -1  ));//
path( { );//
set(path = path.substring( 0 , path.lastIndexOf('/') ) ;);//buff = path.substring( 0 , path.lastIndexOf('/') ) ;
bend( } );//
bend( } );//
set(TT.addItem( path+sname+";"+gifname+";."+Line+";"+S.Comment, null, this, CodeBase , false ););//
set(path = path + sname + "/";);//
path(}else{ );//
set(Level++;);//
set(TT.addItem( path+sname+";"+gifname+";."+Line+";"+S.Comment, null, this, CodeBase , false ););//
set(path = path + sname + "/";);//
bend( } );//
path(} else  if(  S.Type.equals("lend")  ||  S.Type.equals("bend")    ) {);//S.Type.equals("end")  || 
set();///path += S.Statement.replace( ';' , ':' ) + "/";//
set(gifname= S.Type + ".gif";);//
branch(if( S.Type.equals("bend")  ));//
path( { );//
branch(if( path.lastIndexOf('/') > -1  ));//
path( { );//
set(path = path.substring( 0 , path.lastIndexOf('/') ) ;);//buff = path.substring( 0 , path.lastIndexOf('/') ) ;
bend( } );//
branch(if( path.lastIndexOf('/') > -1  ));//
path( { );//
set(path = path.substring( 0 , path.lastIndexOf('/') ) ;);//buff = path.substring( 0 , path.lastIndexOf('/') ) ;
bend( } );//
set(TT.addItem( path+sname+";"+gifname+";."+Line+";"+S.Comment, null, this, CodeBase , false ););//
set(Level-=2;);//
path(}else{ );//
set(TT.addItem( path+sname+";"+gifname+";."+Line+";"+S.Comment, null, this, CodeBase , false ););//
branch(if( path.lastIndexOf('/') > -1  ));//
path( { );//
set(path = path.substring( 0 , path.lastIndexOf('/') ) ;);//buff = path.substring( 0 , path.lastIndexOf('/') ) ;
bend( } );//
set(Level--;);//
bend( } );//
branch(if( Level < 0 ));//
path( { );//
set(Level = 0;);//
bend( } );//
set();//path = buff ;
path( }else{ );//
set(gifname= S.Type + ".gif";);//
branch(if(  S.Type.equals("end")   ));//
path( { );//
set(TT.addItem( path+sname+";"+gifname+";."+Line+";"+S.Comment, null, this, CodeBase , false ););//
branch(if(  Level == 0 ));//
path( { );//
branch(if( path.lastIndexOf('/') > -1  ));//
path( { );//
set(// path = path.substring( 0 , path.lastIndexOf('/') ) ;);//buff = path.substring( 0 , path.lastIndexOf('/') ) ;
bend( } );//
bend( } );//
path(}else{ );//
branch(if( S.Type.equals("process" ) ||   S.Type.equals("set" ) ||  S.Type.equals("generic" )  ));//
path( { );//
branch(if( last_object.equals("process" ) ||  last_object.equals("set" ) ||  last_object.equals("generic" ) ));//
path( { );//
path(}else{ );//
process(S  = (StatementObject)  SO.elementAt( i + 1 ) ;);//
branch(if(  S.Type.equals("process" ) ||   S.Type.equals("set" ) ||  S.Type.equals("generic" )  ));//
path( { );//
set(gifname="multi.gif";);//
bend( } );//
set(TT.addItem( path+sname+";"+gifname+";."+Line+";"+S.Comment, null, this, CodeBase , false ););//
bend( } );//
path(}else{ );//
set(TT.addItem( path+sname+";"+gifname+";."+Line+";"+S.Comment, null, this, CodeBase , false ););//
bend( } );//
bend( } );//
bend( } );//
path( }catch( Exception e ){);//
process(System.out.println("Exception at <InsectaFileName> (<LineNumber>) ! " +   e.getMessage() + "\n"  ););//
bend( } );//
set(last_object  =  S.Type ;);//
lend( } // end for );//
process(TT.LoadImages(););//
end(} );//

input( public void _init_TreeTool());// 
generic();// // // setup base URL...
set( { );// 
set(URL m_baseURL = CodeBase;);//
process(System.out.println("Hello world!");  );//
generic();// // // setup base URL...
set(TT.addItem( "FlowCode Module;program.gif;.500;code map", null, this, m_baseURL, true ););/// //Root node//
set( Item statusItem =new Item( "Loading items.."); );// 
set( );//TT.m_control.m_folder.setTitle( m_folder.getTitle() );
set( );//TT.m_control.m_folder.addElement( statusItem );
set( );//TT.m_control.initalise( );
generic();// // // readin the item params item 1 to item N...
process( );// addItem( param, null, this, m_baseURL, false ); 
set( TT.addItem( "Input1;module.gif; .2;Random Splines" , null, this, m_baseURL, false ););//
set(TT.addItem( "Input1/Input1;input.gif;.2;Random Splines" , null, this, m_baseURL, false ););//
set(TT.addItem( "Input1/Print( HELLO ).1;set.gif;.3;Random Splines" , null, this, m_baseURL, false ););//
set(TT.addItem( "Input1/Print( HELLO ).2;set.gif;.4;Random Splines" , null, this, m_baseURL, false ););//
set(TT.addItem( "Input1/End;end.gif;.5;Random Splines" , null, this, m_baseURL, false ););//
set();//
set(TT.addItem( "Input2;module.gif;.6;Random Splines" , null, this, m_baseURL, false ););//
set(TT.addItem( "Input2/Input1;input.gif;.7;Random Splines" , null, this, m_baseURL, false ););//
loop(TT.addItem( "Input2/loop;loop.gif;.8;Random Splines" , null, this, m_baseURL, false ););//
set(TT.addItem( "Input2/loop/Print( HELLO ).1;set.gif;.100;Random Splines" , null, this, m_baseURL, false ););//
branch(TT.addItem( "Input2/loop/branch;branch.gif;.2;Random Splines" , null, this, m_baseURL, false ););//
path(TT.addItem( "Input2/loop/branch/path1;path.gif;.2;Random Splines" , null, this, m_baseURL, false ););//
set(TT.addItem( "Input2/loop/branch/path1/Print( HELLO ).1;set.gif;.2;Random Splines" , null, this, m_baseURL, false ););//
path(TT.addItem( "Input2/loop/branch/path2;path.gif;.2;Random Splines" , null, this, m_baseURL, false ););//
set(TT.addItem( "Input2/loop/branch/path2/Print( HELLO ).1;set.gif;.2;Random Splines" , null, this, m_baseURL, false ););//
bend(TT.addItem( "Input2/loop/branch/bend;bend.gif;.2;Random Splines" , null, this, m_baseURL, false ););//
set(TT.addItem( "Input2/loop/process;set.gif;.2;Random Splines" , null, this, m_baseURL, false ););//
lend(TT.addItem( "Input2/loop/lend;lend.gif;.2;Random Splines" , null, this, m_baseURL, false ););//
set(TT.addItem( "Input2/End;end.gif;.2;Random Splines" , null, this, m_baseURL, false ););//
set();//
set( statusItem.setTitle( "Loading images..." ); );// 
process(TT.LoadImages(););//
end(} );//

input(public void init(){);//  
set(  CodeBase = getCodeBase();  );//
set(Res  = new Resource( this , CodeBase ););//Res  = null;
process(Res.IDC_LIST1.hide(););//
process(Res.IDC_COMBO2.hide(););//
process(TT = Res.IDC_USER1 ;);// TT = new TreeTool( this , 0 , 0 , 150 , 400  ) ;
branch(try );//
path( {  );//
set(String  vfcname =getParameter("flowfile"););// 
generic(lnkView = new FCview( getDocumentBase() , vfcname  ););//// // Res  = new Resource( this , CodeBase );......
process(init_TreeTool( lnkView.SO ,  vfcname  ););// 
process(  repaint();  );//
generic( NavTool = new FCnavigate( Res.IDC_LIST1 , getDocumentBase() , vfcname  ););//Res.IDC_LIST1.addItem(" test " );
set(Res.IDC_COMBO2.removeAll( ););//
set(Res.IDC_COMBO2.addItem( "input" ););//
set(Res.IDC_COMBO2.addItem( "event" ););//
set(Res.IDC_COMBO2.addItem( "process" ););//
set(Res.IDC_COMBO2.addItem( "set" ););//
set(Res.IDC_COMBO2.addItem( "output" ););// 
set(Res.IDC_COMBO2.addItem( "loop" ););// 
set(Res.IDC_COMBO2.addItem( "lend" ););// 
set(Res.IDC_COMBO2.addItem( "branch" ););// 
set(Res.IDC_COMBO2.addItem( "bend" ););// 
set(Res.IDC_COMBO2.addItem( "path" ););// 
set(Res.IDC_COMBO2.addItem( "end" ););// 
set(Res.IDC_COMBO2.addItem( "generic" ););// 
set(Res.IDC_COMBO2.addItem( "all" ););// 
path( }catch( Exception e ){);//
process(System.out.println("Exception at <InsectaFileName> (<LineNumber>) ! " +   e.getMessage() + "\n"  ););//
bend( } );//
process(lnkView.Zoom-=1 ;);//lnkView.zoom( g , ZoomScale );
process(  repaint(););//this repaint will recalc the vectors
process(lnkView.Zoom+=1 ;);//lnkView.zoom( g , ZoomScale );
process(  repaint(););//this repaint will recalc the vectors
end(  }  );//

input(public static void main(String args[])  {);//  
generic(MyTestApp  Obj = new MyTestApp(););//  create the object application 
set(//  load the resources ignoring MAIN);//Obj.Res = new Resource( Obj , getCodeBase() );
set();//Obj.CodeBase = Obj.getCodeBase();
set(Obj.Res  = new Resource( ););//Obj.Res  = new Resource( Obj , Obj.getCodeBase()  );
process(Obj.Res.initMAINframe( Obj , "Main Window" ) ;);//setup frame using MAIN controls
branch(try );//
path( {  );//
branch(try );//
path( {  );//
generic(Obj.lnkView = new FCview( Obj.getCodeBase() , "test.ins" ););//// // Res  = new Resource( this , CodeBase );......
path( }catch( Exception e ){);//
process(System.out.println("Exception <LineNumber>! " +   e.getMessage() + "\n"  ););//
bend( } );//
path( }catch( Exception   e ){);//
process(System.out.println("Hit e." ););//
bend( } );//
end(} );//  

input(  public void paint(Graphics g){  );//
generic();//  drawCrossHair( g, CrossXPos, CrossYPos, CrossSize );  
generic();//  g.drawString( "KeyHit Code =" + KeyHit , 250 , 20 );
generic();//  g.drawString( "KeyHit Object =" + KeyHit_Object  , 250 , 40 );
process(lnkView.draw(g , CrossXPos + 20, CrossYPos + 20 , 25););//
end(  }  );//

input(  boolean processButtons( Event e ){);//
set(int  DZ = 4;);//
branch(if( "Tree View".equals(e.arg) ));//
path({ );// 
path(} else if( "Home".equals( e.arg ) ) {);//
process(lnkView.Zoom=10;);//lnkView.zoom( g , ZoomScale );
set(CrossXPos = HOMEX ;);//oldx = 0;
set(CrossYPos = HOMEY ;);//oldy = 0;
set(oldx = CrossXPos ;);//oldx = 0;
set(oldy = CrossYPos ;);//oldy = 0;
set(dx =   CrossXPos - oldx ;);//dx =  0 ;
set( dy = CrossYPos - oldy;);//
process(  repaint();  );//
process();//  repaint();  
path(} else if( "Zoom In".equals( e.arg ) ) {);//
branch(if(  lnkView.Zoom > 5 ));//
path( { );//
process(lnkView.Zoom+=DZ ;);//lnkView.zoom( g , ZoomScale );
path( }else{ );//
process(lnkView.Zoom+=1 ;);//lnkView.zoom( g , ZoomScale );
bend( } );//
process(  repaint(););//this repaint will recalc the vectors
process();//showStatement( lnkView.currentObject + 1 );
path(} else if( "Zoom Out".equals( e.arg ) ) {);//
branch(if(  lnkView.Zoom > 5 ));//
path( { );//
process(lnkView.Zoom-=DZ;);//lnkView.zoom( g , ZoomScale );
path( }else{ );//
process(lnkView.Zoom-=1 ;);//lnkView.zoom( g , ZoomScale );
bend( } );//
process(  repaint(););//this repaint will recalc the vectors
process();//showStatement( lnkView.currentObject + 1 );
path(}else{ );//
branch(  switch (e.id){  );//
path(  case Event.MOUSE_DOWN:  );//
branch(if( e.x > 200  ));//
path( { );//
set(  CrossXPos = e.x;);//  CrossXPos+= dx;
set(  CrossYPos = e.y;);//  CrossYPos +=  dy;
branch(if(  oldx != CrossXPos || oldy != CrossYPos   ));//
path( { );//
set(dx =   CrossXPos - oldx ;);//dx =  0 ;
set( dy = CrossYPos - oldy;);//
set(oldx = CrossXPos ;);//oldx = 0;
set(oldy = CrossYPos ;);//oldy = 0;
path( }else{ );//
bend( } );//
path( }else{ );//
bend( } );//
path(  case Event.MOUSE_DRAG:  );//
set({);//
branch(if(   e.x > 200   ));//
path( { );//
set(  CrossXPos = e.x - dx;);//  CrossXPos+= dx;
set(  CrossYPos = e.y  - dy;);//  CrossYPos +=  dy;
process(  repaint();  );//
set(oldx = CrossXPos ;);//oldx = 0;
set(oldy = CrossYPos ;);//oldy = 0;
path( }else{ );//
bend( } );//
set(});//
path(default:   );//
end(return false; );//
bend(  }  );//
bend(} );// 
end(  return true ;});//

input(  public boolean handleEvent(Event e){  );//
branch(  if( processButtons( e ) ));//
path(  {  );//
end(  return true;  );//
path(}else{ );//
branch(  switch (e.id){  );//
path(case TreeTool.TREETOOL_MOUSESELCTION :);//
process();//System.out.println("handleEvent() ->TreeTool.TREETOOL_MOUSESELCTION  called ..."+ e.arg + "\n");
set(int LineToJumpTo =  NavTool.GoTo( e.arg.toString()  ););//returns non zero if we need to jump to a line .. -2 if the control reset the filtered type
branch(if(  LineToJumpTo > 0  ));//
path( { );//
process();//System.out.println(  "\t ---> Jump to line # "+ LineToJumpTo + " ... \n");
process(showStatement( LineToJumpTo-1 ););//
bend( } );//
process(  repaint();  );//
end(break; );//
path(  case Event.ACTION_EVENT:  );//
branch(  if(  "X".equals(e.arg) ||  "OK".equals(e.arg) || "CLOSE".equals(e.arg)  ));//
path(  {  );//
generic(  System.exit(0);      );//// //  THIS LOGIC CALL CAUSES A SECURITY EXCEPTION WHEN USED IN APPLET MODE......
end(  return true;  );//
bend(  }  );//
end(  break;  );//
path(  case Event.WINDOW_DESTROY:  );//
generic(  System.exit(0);      );//// //   THIS FAILS TO FIRE IN APPLICATION MODE......
end(  return true;  );//
path(default:   );//
bend(  }  );//
bend(  }  );//
end(  return super.handleEvent( e ) ; });//  return false; }  

input(// action method);//
set(Toolkit T;);//
set(String  buff; );//

input(public boolean action( Event e , Object what ) {);//GUI widget actions ... drop list ... selection list
set(int LineToJumpTo =  NavTool.GoTo( e.arg.toString()  ););//returns non zero if we need to jump to a line .. -2 if the control reset the filtered type
branch(  if(  e.target instanceof Checkbox   ));//  if(  "true".equals(  what.toString()   ) ||  "false".equals( what.toString()  )  )
path(  {  );//
process();//System.out.println("Hello world!" + e.arg + "   " + e.target.toString()  );
branch(if( (((Checkbox)(e.target)).getLabel()).equals("Comments")  ));//
path( { );//
set(lnkView.DrawComments =  what.toString().equals( "true" ););//
process(  repaint();  );//
path(} else if( (((Checkbox)(e.target)).getLabel()).equals("Show Object Browser") ) {);//
process(System.out.println("Hello world!");  );//
branch(if(  ! ((Checkbox)(e.target)).getState()  ));//
path( { );//
process(Res.IDC_LIST1.hide(););//
process(Res.IDC_COMBO2.hide(););//
process();//Res.IDC_USER1.hide();
path( }else{ );//
process(Res.IDC_LIST1.show(););//
process(Res.IDC_COMBO2.show(););//
process();//Res.IDC_USER1.show();
bend( } );//
path( }else{ );//
end(  return false;);//
bend( } );//
path(} else if( LineToJumpTo > 0 ) {);//
process(showStatement( LineToJumpTo ););//
path(}else{ );//
end(  return false;);//
bend(  }  );//
end(return true ;  });//  return false; }  

input(}       /** end of class definition **/);// <------------ end of class definition

input(// listener method);//
event(   class Command implements ActionListener { );// 
set( static final int SEARCH =0; );// 
set( static final int SORT =1; );// 
set( int id; );// 
branch();//
path();//

input( public Command(int id ));// 
set( { );// 
set(   this.id =id; );// 
end( } );// 
path();//

input( public void actionPerformed(ActionEvent e) );// 
set( { );// 
branch(   switch(id) { );// 
path( case SEARCH: );// 
set(   System.out.println("Searching..."); );// 
end( break; );// 
path( case SORT: );// 
set(   System.out.println("Sorting...."); );// 
end( break; );// 
bend( } );// 
end( } );// 
bend( }  );// 



;INSECTA EMBEDDED SESSION INFORMATION
; 0 13158600 0 0 13158600 65280 16777215 0 0 0 0 0 33023
;    MyTestApp.java   //   ...
; notepad.exe
;INSECTA EMBEDDED ALTSESSION INFORMATION
; 164 489 1062 562 15 79   527   4294967017    java.key  0